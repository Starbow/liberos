// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eros.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "eros.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobufs {

namespace {

const ::google::protobuf::Descriptor* Handshake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Handshake_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandshakeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandshakeResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HandshakeResponse_HandshakeStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UserStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapPool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapPool_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimulationResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimulationResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchmakingQueue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchmakingQueue_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchmakingResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchmakingResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoomIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoomMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatPrivateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatPrivateMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoomUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchmakingStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchmakingStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* Character_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Character_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Region_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_eros_2eproto() {
  protobuf_AddDesc_eros_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "eros.proto");
  GOOGLE_CHECK(file != NULL);
  Handshake_descriptor_ = file->message_type(0);
  static const int Handshake_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handshake, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handshake, auth_key_),
  };
  Handshake_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Handshake_descriptor_,
      Handshake::default_instance_,
      Handshake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handshake, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handshake, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Handshake));
  HandshakeResponse_descriptor_ = file->message_type(1);
  static const int HandshakeResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeResponse, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeResponse, character_),
  };
  HandshakeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandshakeResponse_descriptor_,
      HandshakeResponse::default_instance_,
      HandshakeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandshakeResponse));
  HandshakeResponse_HandshakeStatus_descriptor_ = HandshakeResponse_descriptor_->enum_type(0);
  UserStats_descriptor_ = file->message_type(2);
  static const int UserStats_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, search_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, losses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, forefeits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, walkovers_),
  };
  UserStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserStats_descriptor_,
      UserStats::default_instance_,
      UserStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserStats));
  MapPool_descriptor_ = file->message_type(3);
  static const int MapPool_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPool, map_),
  };
  MapPool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapPool_descriptor_,
      MapPool::default_instance_,
      MapPool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapPool));
  Map_descriptor_ = file->message_type(4);
  static const int Map_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, battle_net_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, battle_net_id_),
  };
  Map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_descriptor_,
      Map::default_instance_,
      Map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map));
  SimulationResult_descriptor_ = file->message_type(5);
  static const int SimulationResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationResult, opponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationResult, victory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationResult, match_quality_),
  };
  SimulationResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimulationResult_descriptor_,
      SimulationResult::default_instance_,
      SimulationResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimulationResult));
  MatchmakingQueue_descriptor_ = file->message_type(6);
  static const int MatchmakingQueue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakingQueue, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakingQueue, radius_),
  };
  MatchmakingQueue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchmakingQueue_descriptor_,
      MatchmakingQueue::default_instance_,
      MatchmakingQueue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakingQueue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakingQueue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchmakingQueue));
  MatchmakingResult_descriptor_ = file->message_type(7);
  static const int MatchmakingResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakingResult, timespan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakingResult, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakingResult, opponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakingResult, opponent_latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakingResult, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakingResult, chat_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakingResult, map_),
  };
  MatchmakingResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchmakingResult_descriptor_,
      MatchmakingResult::default_instance_,
      MatchmakingResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakingResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakingResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchmakingResult));
  ChatRoomInfo_descriptor_ = file->message_type(8);
  static const int ChatRoomInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomInfo, passworded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomInfo, joinable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomInfo, fixed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomInfo, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomInfo, participant_),
  };
  ChatRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoomInfo_descriptor_,
      ChatRoomInfo::default_instance_,
      ChatRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoomInfo));
  ChatRoomIndex_descriptor_ = file->message_type(9);
  static const int ChatRoomIndex_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomIndex, room_),
  };
  ChatRoomIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoomIndex_descriptor_,
      ChatRoomIndex::default_instance_,
      ChatRoomIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoomIndex));
  ChatMessage_descriptor_ = file->message_type(10);
  static const int ChatMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, message_),
  };
  ChatMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMessage_descriptor_,
      ChatMessage::default_instance_,
      ChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMessage));
  ChatRoomMessage_descriptor_ = file->message_type(11);
  static const int ChatRoomMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessage, room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessage, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessage, message_),
  };
  ChatRoomMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoomMessage_descriptor_,
      ChatRoomMessage::default_instance_,
      ChatRoomMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoomMessage));
  ChatPrivateMessage_descriptor_ = file->message_type(12);
  static const int ChatPrivateMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPrivateMessage, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPrivateMessage, message_),
  };
  ChatPrivateMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatPrivateMessage_descriptor_,
      ChatPrivateMessage::default_instance_,
      ChatPrivateMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPrivateMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPrivateMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatPrivateMessage));
  ChatRoomUser_descriptor_ = file->message_type(13);
  static const int ChatRoomUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUser, room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUser, user_),
  };
  ChatRoomUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoomUser_descriptor_,
      ChatRoomUser::default_instance_,
      ChatRoomUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoomUser));
  ChatRoomRequest_descriptor_ = file->message_type(14);
  static const int ChatRoomRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomRequest, room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomRequest, password_),
  };
  ChatRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoomRequest_descriptor_,
      ChatRoomRequest::default_instance_,
      ChatRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoomRequest));
  MatchmakingStats_descriptor_ = file->message_type(15);
  static const int MatchmakingStats_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakingStats, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakingStats, searching_users_),
  };
  MatchmakingStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchmakingStats_descriptor_,
      MatchmakingStats::default_instance_,
      MatchmakingStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakingStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakingStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchmakingStats));
  ServerStats_descriptor_ = file->message_type(16);
  static const int ServerStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, active_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, searching_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, region_),
  };
  ServerStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStats_descriptor_,
      ServerStats::default_instance_,
      ServerStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStats));
  Character_descriptor_ = file->message_type(17);
  static const int Character_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, subregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, profile_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, character_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, character_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, profile_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, ingame_profile_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, verified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, verification_portrait_),
  };
  Character_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Character_descriptor_,
      Character::default_instance_,
      Character_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Character));
  Region_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_eros_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Handshake_descriptor_, &Handshake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandshakeResponse_descriptor_, &HandshakeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserStats_descriptor_, &UserStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapPool_descriptor_, &MapPool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_descriptor_, &Map::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimulationResult_descriptor_, &SimulationResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchmakingQueue_descriptor_, &MatchmakingQueue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchmakingResult_descriptor_, &MatchmakingResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoomInfo_descriptor_, &ChatRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoomIndex_descriptor_, &ChatRoomIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMessage_descriptor_, &ChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoomMessage_descriptor_, &ChatRoomMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatPrivateMessage_descriptor_, &ChatPrivateMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoomUser_descriptor_, &ChatRoomUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoomRequest_descriptor_, &ChatRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchmakingStats_descriptor_, &MatchmakingStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStats_descriptor_, &ServerStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Character_descriptor_, &Character::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_eros_2eproto() {
  delete Handshake::default_instance_;
  delete Handshake_reflection_;
  delete HandshakeResponse::default_instance_;
  delete HandshakeResponse_reflection_;
  delete UserStats::default_instance_;
  delete UserStats_reflection_;
  delete MapPool::default_instance_;
  delete MapPool_reflection_;
  delete Map::default_instance_;
  delete Map_reflection_;
  delete SimulationResult::default_instance_;
  delete SimulationResult_reflection_;
  delete MatchmakingQueue::default_instance_;
  delete MatchmakingQueue_reflection_;
  delete MatchmakingResult::default_instance_;
  delete MatchmakingResult_reflection_;
  delete ChatRoomInfo::default_instance_;
  delete ChatRoomInfo_reflection_;
  delete ChatRoomIndex::default_instance_;
  delete ChatRoomIndex_reflection_;
  delete ChatMessage::default_instance_;
  delete ChatMessage_reflection_;
  delete ChatRoomMessage::default_instance_;
  delete ChatRoomMessage_reflection_;
  delete ChatPrivateMessage::default_instance_;
  delete ChatPrivateMessage_reflection_;
  delete ChatRoomUser::default_instance_;
  delete ChatRoomUser_reflection_;
  delete ChatRoomRequest::default_instance_;
  delete ChatRoomRequest_reflection_;
  delete MatchmakingStats::default_instance_;
  delete MatchmakingStats_reflection_;
  delete ServerStats::default_instance_;
  delete ServerStats_reflection_;
  delete Character::default_instance_;
  delete Character_reflection_;
}

void protobuf_AddDesc_eros_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\neros.proto\022\tprotobufs\"/\n\tHandshake\022\020\n\010"
    "username\030\001 \001(\t\022\020\n\010auth_key\030\002 \001(\t\"\324\001\n\021Han"
    "dshakeResponse\022<\n\006status\030\001 \002(\0162,.protobu"
    "fs.HandshakeResponse.HandshakeStatus\022\"\n\004"
    "user\030\002 \001(\0132\024.protobufs.UserStats\022\n\n\002id\030\003"
    " \001(\003\022\'\n\tcharacter\030\004 \003(\0132\024.protobufs.Char"
    "acter\"(\n\017HandshakeStatus\022\010\n\004FAIL\020\000\022\013\n\007SU"
    "CCESS\020\001\"\210\001\n\tUserStats\022\020\n\010username\030\001 \002(\t\022"
    "\016\n\006points\030\002 \002(\003\022\025\n\rsearch_radius\030\003 \002(\003\022\014"
    "\n\004wins\030\004 \002(\003\022\016\n\006losses\030\005 \002(\003\022\021\n\tforefeit"
    "s\030\006 \002(\003\022\021\n\twalkovers\030\007 \002(\003\"&\n\007MapPool\022\033\n"
    "\003map\030\001 \003(\0132\016.protobufs.Map\"X\n\003Map\022!\n\006reg"
    "ion\030\001 \002(\0162\021.protobufs.Region\022\027\n\017battle_n"
    "et_name\030\002 \002(\t\022\025\n\rbattle_net_id\030\003 \002(\005\"b\n\020"
    "SimulationResult\022&\n\010opponent\030\001 \002(\0132\024.pro"
    "tobufs.UserStats\022\017\n\007victory\030\002 \002(\010\022\025\n\rmat"
    "ch_quality\030\003 \002(\001\"E\n\020MatchmakingQueue\022!\n\006"
    "region\030\001 \002(\0162\021.protobufs.Region\022\016\n\006radiu"
    "s\030\002 \002(\003\"\271\001\n\021MatchmakingResult\022\020\n\010timespa"
    "n\030\001 \002(\003\022\017\n\007quality\030\002 \002(\001\022&\n\010opponent\030\003 \002"
    "(\0132\024.protobufs.UserStats\022\030\n\020opponent_lat"
    "ency\030\004 \002(\003\022\017\n\007channel\030\005 \002(\t\022\021\n\tchat_room"
    "\030\006 \002(\t\022\033\n\003map\030\007 \002(\0132\016.protobufs.Map\"\230\001\n\014"
    "ChatRoomInfo\022\013\n\003key\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022"
    "\022\n\npassworded\030\003 \002(\010\022\020\n\010joinable\030\004 \002(\010\022\r\n"
    "\005fixed\030\005 \002(\010\022\r\n\005users\030\006 \002(\003\022)\n\013participa"
    "nt\030\007 \003(\0132\024.protobufs.UserStats\"6\n\rChatRo"
    "omIndex\022%\n\004room\030\001 \003(\0132\027.protobufs.ChatRo"
    "omInfo\">\n\013ChatMessage\022\016\n\006sender\030\001 \002(\t\022\016\n"
    "\006target\030\002 \002(\t\022\017\n\007message\030\003 \002(\t\"o\n\017ChatRo"
    "omMessage\022%\n\004room\030\001 \002(\0132\027.protobufs.Chat"
    "RoomInfo\022$\n\006sender\030\002 \002(\0132\024.protobufs.Use"
    "rStats\022\017\n\007message\030\003 \002(\t\"K\n\022ChatPrivateMe"
    "ssage\022$\n\006sender\030\001 \002(\0132\024.protobufs.UserSt"
    "ats\022\017\n\007message\030\002 \002(\t\"Y\n\014ChatRoomUser\022%\n\004"
    "room\030\001 \002(\0132\027.protobufs.ChatRoomInfo\022\"\n\004u"
    "ser\030\002 \002(\0132\024.protobufs.UserStats\"1\n\017ChatR"
    "oomRequest\022\014\n\004room\030\001 \002(\t\022\020\n\010password\030\002 \002"
    "(\t\"N\n\020MatchmakingStats\022!\n\006region\030\001 \002(\0162\021"
    ".protobufs.Region\022\027\n\017searching_users\030\002 \002"
    "(\003\"i\n\013ServerStats\022\024\n\014active_users\030\001 \002(\003\022"
    "\027\n\017searching_users\030\002 \002(\003\022+\n\006region\030\003 \003(\013"
    "2\033.protobufs.MatchmakingStats\"\351\001\n\tCharac"
    "ter\022!\n\006region\030\001 \002(\0162\021.protobufs.Region\022\021"
    "\n\tsubregion\030\002 \002(\005\022\022\n\nprofile_id\030\003 \002(\005\022\026\n"
    "\016character_name\030\004 \002(\t\022\026\n\016character_code\030"
    "\005 \002(\005\022\024\n\014profile_link\030\006 \001(\t\022\033\n\023ingame_pr"
    "ofile_link\030\007 \001(\t\022\020\n\010verified\030\010 \001(\010\022\035\n\025ve"
    "rification_portrait\030\t \001(\005*1\n\006Region\022\006\n\002N"
    "A\020\001\022\006\n\002EU\020\002\022\006\n\002KR\020\003\022\006\n\002CN\020\005\022\007\n\003SEA\020\006", 1996);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "eros.proto", &protobuf_RegisterTypes);
  Handshake::default_instance_ = new Handshake();
  HandshakeResponse::default_instance_ = new HandshakeResponse();
  UserStats::default_instance_ = new UserStats();
  MapPool::default_instance_ = new MapPool();
  Map::default_instance_ = new Map();
  SimulationResult::default_instance_ = new SimulationResult();
  MatchmakingQueue::default_instance_ = new MatchmakingQueue();
  MatchmakingResult::default_instance_ = new MatchmakingResult();
  ChatRoomInfo::default_instance_ = new ChatRoomInfo();
  ChatRoomIndex::default_instance_ = new ChatRoomIndex();
  ChatMessage::default_instance_ = new ChatMessage();
  ChatRoomMessage::default_instance_ = new ChatRoomMessage();
  ChatPrivateMessage::default_instance_ = new ChatPrivateMessage();
  ChatRoomUser::default_instance_ = new ChatRoomUser();
  ChatRoomRequest::default_instance_ = new ChatRoomRequest();
  MatchmakingStats::default_instance_ = new MatchmakingStats();
  ServerStats::default_instance_ = new ServerStats();
  Character::default_instance_ = new Character();
  Handshake::default_instance_->InitAsDefaultInstance();
  HandshakeResponse::default_instance_->InitAsDefaultInstance();
  UserStats::default_instance_->InitAsDefaultInstance();
  MapPool::default_instance_->InitAsDefaultInstance();
  Map::default_instance_->InitAsDefaultInstance();
  SimulationResult::default_instance_->InitAsDefaultInstance();
  MatchmakingQueue::default_instance_->InitAsDefaultInstance();
  MatchmakingResult::default_instance_->InitAsDefaultInstance();
  ChatRoomInfo::default_instance_->InitAsDefaultInstance();
  ChatRoomIndex::default_instance_->InitAsDefaultInstance();
  ChatMessage::default_instance_->InitAsDefaultInstance();
  ChatRoomMessage::default_instance_->InitAsDefaultInstance();
  ChatPrivateMessage::default_instance_->InitAsDefaultInstance();
  ChatRoomUser::default_instance_->InitAsDefaultInstance();
  ChatRoomRequest::default_instance_->InitAsDefaultInstance();
  MatchmakingStats::default_instance_->InitAsDefaultInstance();
  ServerStats::default_instance_->InitAsDefaultInstance();
  Character::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_eros_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_eros_2eproto {
  StaticDescriptorInitializer_eros_2eproto() {
    protobuf_AddDesc_eros_2eproto();
  }
} static_descriptor_initializer_eros_2eproto_;
const ::google::protobuf::EnumDescriptor* Region_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Region_descriptor_;
}
bool Region_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Handshake::kUsernameFieldNumber;
const int Handshake::kAuthKeyFieldNumber;
#endif  // !_MSC_VER

Handshake::Handshake()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Handshake::InitAsDefaultInstance() {
}

Handshake::Handshake(const Handshake& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Handshake::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  auth_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Handshake::~Handshake() {
  SharedDtor();
}

void Handshake::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (auth_key_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_key_;
  }
  if (this != default_instance_) {
  }
}

void Handshake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Handshake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Handshake_descriptor_;
}

const Handshake& Handshake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eros_2eproto();
  return *default_instance_;
}

Handshake* Handshake::default_instance_ = NULL;

Handshake* Handshake::New() const {
  return new Handshake;
}

void Handshake::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_auth_key()) {
      if (auth_key_ != &::google::protobuf::internal::kEmptyString) {
        auth_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Handshake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_auth_key;
        break;
      }

      // optional string auth_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auth_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auth_key().data(), this->auth_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Handshake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // optional string auth_key = 2;
  if (has_auth_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth_key().data(), this->auth_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->auth_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Handshake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string auth_key = 2;
  if (has_auth_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth_key().data(), this->auth_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->auth_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Handshake::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string auth_key = 2;
    if (has_auth_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Handshake::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Handshake* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Handshake*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Handshake::MergeFrom(const Handshake& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_auth_key()) {
      set_auth_key(from.auth_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Handshake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Handshake::CopyFrom(const Handshake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handshake::IsInitialized() const {

  return true;
}

void Handshake::Swap(Handshake* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(auth_key_, other->auth_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Handshake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Handshake_descriptor_;
  metadata.reflection = Handshake_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* HandshakeResponse_HandshakeStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandshakeResponse_HandshakeStatus_descriptor_;
}
bool HandshakeResponse_HandshakeStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HandshakeResponse_HandshakeStatus HandshakeResponse::FAIL;
const HandshakeResponse_HandshakeStatus HandshakeResponse::SUCCESS;
const HandshakeResponse_HandshakeStatus HandshakeResponse::HandshakeStatus_MIN;
const HandshakeResponse_HandshakeStatus HandshakeResponse::HandshakeStatus_MAX;
const int HandshakeResponse::HandshakeStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int HandshakeResponse::kStatusFieldNumber;
const int HandshakeResponse::kUserFieldNumber;
const int HandshakeResponse::kIdFieldNumber;
const int HandshakeResponse::kCharacterFieldNumber;
#endif  // !_MSC_VER

HandshakeResponse::HandshakeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandshakeResponse::InitAsDefaultInstance() {
  user_ = const_cast< ::protobufs::UserStats*>(&::protobufs::UserStats::default_instance());
}

HandshakeResponse::HandshakeResponse(const HandshakeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandshakeResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  user_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandshakeResponse::~HandshakeResponse() {
  SharedDtor();
}

void HandshakeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void HandshakeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandshakeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandshakeResponse_descriptor_;
}

const HandshakeResponse& HandshakeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eros_2eproto();
  return *default_instance_;
}

HandshakeResponse* HandshakeResponse::default_instance_ = NULL;

HandshakeResponse* HandshakeResponse::New() const {
  return new HandshakeResponse;
}

void HandshakeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (has_user()) {
      if (user_ != NULL) user_->::protobufs::UserStats::Clear();
    }
    id_ = GOOGLE_LONGLONG(0);
  }
  character_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandshakeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobufs.HandshakeResponse.HandshakeStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobufs::HandshakeResponse_HandshakeStatus_IsValid(value)) {
            set_status(static_cast< ::protobufs::HandshakeResponse_HandshakeStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // optional .protobufs.UserStats user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int64 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_character;
        break;
      }

      // repeated .protobufs.Character character = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_character:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_character()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_character;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandshakeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobufs.HandshakeResponse.HandshakeStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional .protobufs.UserStats user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }

  // optional int64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->id(), output);
  }

  // repeated .protobufs.Character character = 4;
  for (int i = 0; i < this->character_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->character(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandshakeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobufs.HandshakeResponse.HandshakeStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional .protobufs.UserStats user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }

  // optional int64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->id(), target);
  }

  // repeated .protobufs.Character character = 4;
  for (int i = 0; i < this->character_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->character(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandshakeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobufs.HandshakeResponse.HandshakeStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .protobufs.UserStats user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional int64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  // repeated .protobufs.Character character = 4;
  total_size += 1 * this->character_size();
  for (int i = 0; i < this->character_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->character(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandshakeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandshakeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandshakeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandshakeResponse::MergeFrom(const HandshakeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  character_.MergeFrom(from.character_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_user()) {
      mutable_user()->::protobufs::UserStats::MergeFrom(from.user());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandshakeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandshakeResponse::CopyFrom(const HandshakeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  for (int i = 0; i < character_size(); i++) {
    if (!this->character(i).IsInitialized()) return false;
  }
  return true;
}

void HandshakeResponse::Swap(HandshakeResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(user_, other->user_);
    std::swap(id_, other->id_);
    character_.Swap(&other->character_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandshakeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandshakeResponse_descriptor_;
  metadata.reflection = HandshakeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserStats::kUsernameFieldNumber;
const int UserStats::kPointsFieldNumber;
const int UserStats::kSearchRadiusFieldNumber;
const int UserStats::kWinsFieldNumber;
const int UserStats::kLossesFieldNumber;
const int UserStats::kForefeitsFieldNumber;
const int UserStats::kWalkoversFieldNumber;
#endif  // !_MSC_VER

UserStats::UserStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserStats::InitAsDefaultInstance() {
}

UserStats::UserStats(const UserStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserStats::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  points_ = GOOGLE_LONGLONG(0);
  search_radius_ = GOOGLE_LONGLONG(0);
  wins_ = GOOGLE_LONGLONG(0);
  losses_ = GOOGLE_LONGLONG(0);
  forefeits_ = GOOGLE_LONGLONG(0);
  walkovers_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStats::~UserStats() {
  SharedDtor();
}

void UserStats::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void UserStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStats_descriptor_;
}

const UserStats& UserStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eros_2eproto();
  return *default_instance_;
}

UserStats* UserStats::default_instance_ = NULL;

UserStats* UserStats::New() const {
  return new UserStats;
}

void UserStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    points_ = GOOGLE_LONGLONG(0);
    search_radius_ = GOOGLE_LONGLONG(0);
    wins_ = GOOGLE_LONGLONG(0);
    losses_ = GOOGLE_LONGLONG(0);
    forefeits_ = GOOGLE_LONGLONG(0);
    walkovers_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_points;
        break;
      }

      // required int64 points = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_search_radius;
        break;
      }

      // required int64 search_radius = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_search_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &search_radius_)));
          set_has_search_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wins;
        break;
      }

      // required int64 wins = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wins_)));
          set_has_wins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_losses;
        break;
      }

      // required int64 losses = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_losses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &losses_)));
          set_has_losses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_forefeits;
        break;
      }

      // required int64 forefeits = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forefeits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &forefeits_)));
          set_has_forefeits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_walkovers;
        break;
      }

      // required int64 walkovers = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_walkovers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &walkovers_)));
          set_has_walkovers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // required int64 points = 2;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->points(), output);
  }

  // required int64 search_radius = 3;
  if (has_search_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->search_radius(), output);
  }

  // required int64 wins = 4;
  if (has_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->wins(), output);
  }

  // required int64 losses = 5;
  if (has_losses()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->losses(), output);
  }

  // required int64 forefeits = 6;
  if (has_forefeits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->forefeits(), output);
  }

  // required int64 walkovers = 7;
  if (has_walkovers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->walkovers(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required int64 points = 2;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->points(), target);
  }

  // required int64 search_radius = 3;
  if (has_search_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->search_radius(), target);
  }

  // required int64 wins = 4;
  if (has_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->wins(), target);
  }

  // required int64 losses = 5;
  if (has_losses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->losses(), target);
  }

  // required int64 forefeits = 6;
  if (has_forefeits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->forefeits(), target);
  }

  // required int64 walkovers = 7;
  if (has_walkovers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->walkovers(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required int64 points = 2;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->points());
    }

    // required int64 search_radius = 3;
    if (has_search_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->search_radius());
    }

    // required int64 wins = 4;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wins());
    }

    // required int64 losses = 5;
    if (has_losses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->losses());
    }

    // required int64 forefeits = 6;
    if (has_forefeits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->forefeits());
    }

    // required int64 walkovers = 7;
    if (has_walkovers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->walkovers());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserStats::MergeFrom(const UserStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_search_radius()) {
      set_search_radius(from.search_radius());
    }
    if (from.has_wins()) {
      set_wins(from.wins());
    }
    if (from.has_losses()) {
      set_losses(from.losses());
    }
    if (from.has_forefeits()) {
      set_forefeits(from.forefeits());
    }
    if (from.has_walkovers()) {
      set_walkovers(from.walkovers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStats::CopyFrom(const UserStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void UserStats::Swap(UserStats* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(points_, other->points_);
    std::swap(search_radius_, other->search_radius_);
    std::swap(wins_, other->wins_);
    std::swap(losses_, other->losses_);
    std::swap(forefeits_, other->forefeits_);
    std::swap(walkovers_, other->walkovers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStats_descriptor_;
  metadata.reflection = UserStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapPool::kMapFieldNumber;
#endif  // !_MSC_VER

MapPool::MapPool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapPool::InitAsDefaultInstance() {
}

MapPool::MapPool(const MapPool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapPool::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapPool::~MapPool() {
  SharedDtor();
}

void MapPool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapPool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapPool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapPool_descriptor_;
}

const MapPool& MapPool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eros_2eproto();
  return *default_instance_;
}

MapPool* MapPool::default_instance_ = NULL;

MapPool* MapPool::New() const {
  return new MapPool;
}

void MapPool::Clear() {
  map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapPool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobufs.Map map = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapPool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobufs.Map map = 1;
  for (int i = 0; i < this->map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapPool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobufs.Map map = 1;
  for (int i = 0; i < this->map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapPool::ByteSize() const {
  int total_size = 0;

  // repeated .protobufs.Map map = 1;
  total_size += 1 * this->map_size();
  for (int i = 0; i < this->map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapPool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapPool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapPool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapPool::MergeFrom(const MapPool& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_.MergeFrom(from.map_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapPool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapPool::CopyFrom(const MapPool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPool::IsInitialized() const {

  for (int i = 0; i < map_size(); i++) {
    if (!this->map(i).IsInitialized()) return false;
  }
  return true;
}

void MapPool::Swap(MapPool* other) {
  if (other != this) {
    map_.Swap(&other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapPool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapPool_descriptor_;
  metadata.reflection = MapPool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map::kRegionFieldNumber;
const int Map::kBattleNetNameFieldNumber;
const int Map::kBattleNetIdFieldNumber;
#endif  // !_MSC_VER

Map::Map()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map::InitAsDefaultInstance() {
}

Map::Map(const Map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map::SharedCtor() {
  _cached_size_ = 0;
  region_ = 1;
  battle_net_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battle_net_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map::~Map() {
  SharedDtor();
}

void Map::SharedDtor() {
  if (battle_net_name_ != &::google::protobuf::internal::kEmptyString) {
    delete battle_net_name_;
  }
  if (this != default_instance_) {
  }
}

void Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_descriptor_;
}

const Map& Map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eros_2eproto();
  return *default_instance_;
}

Map* Map::default_instance_ = NULL;

Map* Map::New() const {
  return new Map;
}

void Map::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_ = 1;
    if (has_battle_net_name()) {
      if (battle_net_name_ != &::google::protobuf::internal::kEmptyString) {
        battle_net_name_->clear();
      }
    }
    battle_net_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobufs.Region region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobufs::Region_IsValid(value)) {
            set_region(static_cast< ::protobufs::Region >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battle_net_name;
        break;
      }

      // required string battle_net_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_net_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battle_net_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->battle_net_name().data(), this->battle_net_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_net_id;
        break;
      }

      // required int32 battle_net_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_net_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_net_id_)));
          set_has_battle_net_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobufs.Region region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->region(), output);
  }

  // required string battle_net_name = 2;
  if (has_battle_net_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battle_net_name().data(), this->battle_net_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->battle_net_name(), output);
  }

  // required int32 battle_net_id = 3;
  if (has_battle_net_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battle_net_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobufs.Region region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->region(), target);
  }

  // required string battle_net_name = 2;
  if (has_battle_net_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battle_net_name().data(), this->battle_net_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->battle_net_name(), target);
  }

  // required int32 battle_net_id = 3;
  if (has_battle_net_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battle_net_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobufs.Region region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->region());
    }

    // required string battle_net_name = 2;
    if (has_battle_net_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battle_net_name());
    }

    // required int32 battle_net_id = 3;
    if (has_battle_net_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_net_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_battle_net_name()) {
      set_battle_net_name(from.battle_net_name());
    }
    if (from.has_battle_net_id()) {
      set_battle_net_id(from.battle_net_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Map::Swap(Map* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(battle_net_name_, other->battle_net_name_);
    std::swap(battle_net_id_, other->battle_net_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_descriptor_;
  metadata.reflection = Map_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimulationResult::kOpponentFieldNumber;
const int SimulationResult::kVictoryFieldNumber;
const int SimulationResult::kMatchQualityFieldNumber;
#endif  // !_MSC_VER

SimulationResult::SimulationResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimulationResult::InitAsDefaultInstance() {
  opponent_ = const_cast< ::protobufs::UserStats*>(&::protobufs::UserStats::default_instance());
}

SimulationResult::SimulationResult(const SimulationResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimulationResult::SharedCtor() {
  _cached_size_ = 0;
  opponent_ = NULL;
  victory_ = false;
  match_quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimulationResult::~SimulationResult() {
  SharedDtor();
}

void SimulationResult::SharedDtor() {
  if (this != default_instance_) {
    delete opponent_;
  }
}

void SimulationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimulationResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimulationResult_descriptor_;
}

const SimulationResult& SimulationResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eros_2eproto();
  return *default_instance_;
}

SimulationResult* SimulationResult::default_instance_ = NULL;

SimulationResult* SimulationResult::New() const {
  return new SimulationResult;
}

void SimulationResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_opponent()) {
      if (opponent_ != NULL) opponent_->::protobufs::UserStats::Clear();
    }
    victory_ = false;
    match_quality_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimulationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobufs.UserStats opponent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opponent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_victory;
        break;
      }

      // required bool victory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_victory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &victory_)));
          set_has_victory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_match_quality;
        break;
      }

      // required double match_quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_match_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &match_quality_)));
          set_has_match_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimulationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobufs.UserStats opponent = 1;
  if (has_opponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->opponent(), output);
  }

  // required bool victory = 2;
  if (has_victory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->victory(), output);
  }

  // required double match_quality = 3;
  if (has_match_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->match_quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimulationResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobufs.UserStats opponent = 1;
  if (has_opponent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->opponent(), target);
  }

  // required bool victory = 2;
  if (has_victory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->victory(), target);
  }

  // required double match_quality = 3;
  if (has_match_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->match_quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimulationResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobufs.UserStats opponent = 1;
    if (has_opponent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opponent());
    }

    // required bool victory = 2;
    if (has_victory()) {
      total_size += 1 + 1;
    }

    // required double match_quality = 3;
    if (has_match_quality()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimulationResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimulationResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimulationResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimulationResult::MergeFrom(const SimulationResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opponent()) {
      mutable_opponent()->::protobufs::UserStats::MergeFrom(from.opponent());
    }
    if (from.has_victory()) {
      set_victory(from.victory());
    }
    if (from.has_match_quality()) {
      set_match_quality(from.match_quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimulationResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationResult::CopyFrom(const SimulationResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_opponent()) {
    if (!this->opponent().IsInitialized()) return false;
  }
  return true;
}

void SimulationResult::Swap(SimulationResult* other) {
  if (other != this) {
    std::swap(opponent_, other->opponent_);
    std::swap(victory_, other->victory_);
    std::swap(match_quality_, other->match_quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimulationResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimulationResult_descriptor_;
  metadata.reflection = SimulationResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchmakingQueue::kRegionFieldNumber;
const int MatchmakingQueue::kRadiusFieldNumber;
#endif  // !_MSC_VER

MatchmakingQueue::MatchmakingQueue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchmakingQueue::InitAsDefaultInstance() {
}

MatchmakingQueue::MatchmakingQueue(const MatchmakingQueue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchmakingQueue::SharedCtor() {
  _cached_size_ = 0;
  region_ = 1;
  radius_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchmakingQueue::~MatchmakingQueue() {
  SharedDtor();
}

void MatchmakingQueue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchmakingQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchmakingQueue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchmakingQueue_descriptor_;
}

const MatchmakingQueue& MatchmakingQueue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eros_2eproto();
  return *default_instance_;
}

MatchmakingQueue* MatchmakingQueue::default_instance_ = NULL;

MatchmakingQueue* MatchmakingQueue::New() const {
  return new MatchmakingQueue;
}

void MatchmakingQueue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_ = 1;
    radius_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchmakingQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobufs.Region region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobufs::Region_IsValid(value)) {
            set_region(static_cast< ::protobufs::Region >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_radius;
        break;
      }

      // required int64 radius = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchmakingQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobufs.Region region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->region(), output);
  }

  // required int64 radius = 2;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->radius(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchmakingQueue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobufs.Region region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->region(), target);
  }

  // required int64 radius = 2;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->radius(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchmakingQueue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobufs.Region region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->region());
    }

    // required int64 radius = 2;
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->radius());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchmakingQueue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchmakingQueue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchmakingQueue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchmakingQueue::MergeFrom(const MatchmakingQueue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchmakingQueue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchmakingQueue::CopyFrom(const MatchmakingQueue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchmakingQueue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MatchmakingQueue::Swap(MatchmakingQueue* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(radius_, other->radius_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchmakingQueue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchmakingQueue_descriptor_;
  metadata.reflection = MatchmakingQueue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchmakingResult::kTimespanFieldNumber;
const int MatchmakingResult::kQualityFieldNumber;
const int MatchmakingResult::kOpponentFieldNumber;
const int MatchmakingResult::kOpponentLatencyFieldNumber;
const int MatchmakingResult::kChannelFieldNumber;
const int MatchmakingResult::kChatRoomFieldNumber;
const int MatchmakingResult::kMapFieldNumber;
#endif  // !_MSC_VER

MatchmakingResult::MatchmakingResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchmakingResult::InitAsDefaultInstance() {
  opponent_ = const_cast< ::protobufs::UserStats*>(&::protobufs::UserStats::default_instance());
  map_ = const_cast< ::protobufs::Map*>(&::protobufs::Map::default_instance());
}

MatchmakingResult::MatchmakingResult(const MatchmakingResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchmakingResult::SharedCtor() {
  _cached_size_ = 0;
  timespan_ = GOOGLE_LONGLONG(0);
  quality_ = 0;
  opponent_ = NULL;
  opponent_latency_ = GOOGLE_LONGLONG(0);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_room_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  map_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchmakingResult::~MatchmakingResult() {
  SharedDtor();
}

void MatchmakingResult::SharedDtor() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (chat_room_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_room_;
  }
  if (this != default_instance_) {
    delete opponent_;
    delete map_;
  }
}

void MatchmakingResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchmakingResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchmakingResult_descriptor_;
}

const MatchmakingResult& MatchmakingResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eros_2eproto();
  return *default_instance_;
}

MatchmakingResult* MatchmakingResult::default_instance_ = NULL;

MatchmakingResult* MatchmakingResult::New() const {
  return new MatchmakingResult;
}

void MatchmakingResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timespan_ = GOOGLE_LONGLONG(0);
    quality_ = 0;
    if (has_opponent()) {
      if (opponent_ != NULL) opponent_->::protobufs::UserStats::Clear();
    }
    opponent_latency_ = GOOGLE_LONGLONG(0);
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    if (has_chat_room()) {
      if (chat_room_ != &::google::protobuf::internal::kEmptyString) {
        chat_room_->clear();
      }
    }
    if (has_map()) {
      if (map_ != NULL) map_->::protobufs::Map::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchmakingResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timespan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timespan_)));
          set_has_timespan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_quality;
        break;
      }

      // required double quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_opponent;
        break;
      }

      // required .protobufs.UserStats opponent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opponent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opponent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opponent_latency;
        break;
      }

      // required int64 opponent_latency = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opponent_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &opponent_latency_)));
          set_has_opponent_latency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel;
        break;
      }

      // required string channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_chat_room;
        break;
      }

      // required string chat_room = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_room()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chat_room().data(), this->chat_room().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_map;
        break;
      }

      // required .protobufs.Map map = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchmakingResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 timespan = 1;
  if (has_timespan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timespan(), output);
  }

  // required double quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->quality(), output);
  }

  // required .protobufs.UserStats opponent = 3;
  if (has_opponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->opponent(), output);
  }

  // required int64 opponent_latency = 4;
  if (has_opponent_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->opponent_latency(), output);
  }

  // required string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel(), output);
  }

  // required string chat_room = 6;
  if (has_chat_room()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_room().data(), this->chat_room().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->chat_room(), output);
  }

  // required .protobufs.Map map = 7;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchmakingResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 timespan = 1;
  if (has_timespan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timespan(), target);
  }

  // required double quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->quality(), target);
  }

  // required .protobufs.UserStats opponent = 3;
  if (has_opponent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->opponent(), target);
  }

  // required int64 opponent_latency = 4;
  if (has_opponent_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->opponent_latency(), target);
  }

  // required string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel(), target);
  }

  // required string chat_room = 6;
  if (has_chat_room()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_room().data(), this->chat_room().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->chat_room(), target);
  }

  // required .protobufs.Map map = 7;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchmakingResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 timespan = 1;
    if (has_timespan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timespan());
    }

    // required double quality = 2;
    if (has_quality()) {
      total_size += 1 + 8;
    }

    // required .protobufs.UserStats opponent = 3;
    if (has_opponent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opponent());
    }

    // required int64 opponent_latency = 4;
    if (has_opponent_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->opponent_latency());
    }

    // required string channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // required string chat_room = 6;
    if (has_chat_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_room());
    }

    // required .protobufs.Map map = 7;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->map());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchmakingResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchmakingResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchmakingResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchmakingResult::MergeFrom(const MatchmakingResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timespan()) {
      set_timespan(from.timespan());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_opponent()) {
      mutable_opponent()->::protobufs::UserStats::MergeFrom(from.opponent());
    }
    if (from.has_opponent_latency()) {
      set_opponent_latency(from.opponent_latency());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_chat_room()) {
      set_chat_room(from.chat_room());
    }
    if (from.has_map()) {
      mutable_map()->::protobufs::Map::MergeFrom(from.map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchmakingResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchmakingResult::CopyFrom(const MatchmakingResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchmakingResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_opponent()) {
    if (!this->opponent().IsInitialized()) return false;
  }
  if (has_map()) {
    if (!this->map().IsInitialized()) return false;
  }
  return true;
}

void MatchmakingResult::Swap(MatchmakingResult* other) {
  if (other != this) {
    std::swap(timespan_, other->timespan_);
    std::swap(quality_, other->quality_);
    std::swap(opponent_, other->opponent_);
    std::swap(opponent_latency_, other->opponent_latency_);
    std::swap(channel_, other->channel_);
    std::swap(chat_room_, other->chat_room_);
    std::swap(map_, other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchmakingResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchmakingResult_descriptor_;
  metadata.reflection = MatchmakingResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoomInfo::kKeyFieldNumber;
const int ChatRoomInfo::kNameFieldNumber;
const int ChatRoomInfo::kPasswordedFieldNumber;
const int ChatRoomInfo::kJoinableFieldNumber;
const int ChatRoomInfo::kFixedFieldNumber;
const int ChatRoomInfo::kUsersFieldNumber;
const int ChatRoomInfo::kParticipantFieldNumber;
#endif  // !_MSC_VER

ChatRoomInfo::ChatRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatRoomInfo::InitAsDefaultInstance() {
}

ChatRoomInfo::ChatRoomInfo(const ChatRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passworded_ = false;
  joinable_ = false;
  fixed_ = false;
  users_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoomInfo::~ChatRoomInfo() {
  SharedDtor();
}

void ChatRoomInfo::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ChatRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomInfo_descriptor_;
}

const ChatRoomInfo& ChatRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eros_2eproto();
  return *default_instance_;
}

ChatRoomInfo* ChatRoomInfo::default_instance_ = NULL;

ChatRoomInfo* ChatRoomInfo::New() const {
  return new ChatRoomInfo;
}

void ChatRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    passworded_ = false;
    joinable_ = false;
    fixed_ = false;
    users_ = GOOGLE_LONGLONG(0);
  }
  participant_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_passworded;
        break;
      }

      // required bool passworded = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passworded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passworded_)));
          set_has_passworded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_joinable;
        break;
      }

      // required bool joinable = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joinable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &joinable_)));
          set_has_joinable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fixed;
        break;
      }

      // required bool fixed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fixed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fixed_)));
          set_has_fixed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_users;
        break;
      }

      // required int64 users = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &users_)));
          set_has_users();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_participant;
        break;
      }

      // repeated .protobufs.UserStats participant = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_participant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_participant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_participant;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required bool passworded = 3;
  if (has_passworded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->passworded(), output);
  }

  // required bool joinable = 4;
  if (has_joinable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->joinable(), output);
  }

  // required bool fixed = 5;
  if (has_fixed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fixed(), output);
  }

  // required int64 users = 6;
  if (has_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->users(), output);
  }

  // repeated .protobufs.UserStats participant = 7;
  for (int i = 0; i < this->participant_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->participant(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required bool passworded = 3;
  if (has_passworded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->passworded(), target);
  }

  // required bool joinable = 4;
  if (has_joinable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->joinable(), target);
  }

  // required bool fixed = 5;
  if (has_fixed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fixed(), target);
  }

  // required int64 users = 6;
  if (has_users()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->users(), target);
  }

  // repeated .protobufs.UserStats participant = 7;
  for (int i = 0; i < this->participant_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->participant(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required bool passworded = 3;
    if (has_passworded()) {
      total_size += 1 + 1;
    }

    // required bool joinable = 4;
    if (has_joinable()) {
      total_size += 1 + 1;
    }

    // required bool fixed = 5;
    if (has_fixed()) {
      total_size += 1 + 1;
    }

    // required int64 users = 6;
    if (has_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->users());
    }

  }
  // repeated .protobufs.UserStats participant = 7;
  total_size += 1 * this->participant_size();
  for (int i = 0; i < this->participant_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->participant(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoomInfo::MergeFrom(const ChatRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  participant_.MergeFrom(from.participant_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_passworded()) {
      set_passworded(from.passworded());
    }
    if (from.has_joinable()) {
      set_joinable(from.joinable());
    }
    if (from.has_fixed()) {
      set_fixed(from.fixed());
    }
    if (from.has_users()) {
      set_users(from.users());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomInfo::CopyFrom(const ChatRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  for (int i = 0; i < participant_size(); i++) {
    if (!this->participant(i).IsInitialized()) return false;
  }
  return true;
}

void ChatRoomInfo::Swap(ChatRoomInfo* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(name_, other->name_);
    std::swap(passworded_, other->passworded_);
    std::swap(joinable_, other->joinable_);
    std::swap(fixed_, other->fixed_);
    std::swap(users_, other->users_);
    participant_.Swap(&other->participant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomInfo_descriptor_;
  metadata.reflection = ChatRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoomIndex::kRoomFieldNumber;
#endif  // !_MSC_VER

ChatRoomIndex::ChatRoomIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatRoomIndex::InitAsDefaultInstance() {
}

ChatRoomIndex::ChatRoomIndex(const ChatRoomIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatRoomIndex::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoomIndex::~ChatRoomIndex() {
  SharedDtor();
}

void ChatRoomIndex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatRoomIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomIndex_descriptor_;
}

const ChatRoomIndex& ChatRoomIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eros_2eproto();
  return *default_instance_;
}

ChatRoomIndex* ChatRoomIndex::default_instance_ = NULL;

ChatRoomIndex* ChatRoomIndex::New() const {
  return new ChatRoomIndex;
}

void ChatRoomIndex::Clear() {
  room_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoomIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobufs.ChatRoomInfo room = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_room;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatRoomIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobufs.ChatRoomInfo room = 1;
  for (int i = 0; i < this->room_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatRoomIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobufs.ChatRoomInfo room = 1;
  for (int i = 0; i < this->room_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatRoomIndex::ByteSize() const {
  int total_size = 0;

  // repeated .protobufs.ChatRoomInfo room = 1;
  total_size += 1 * this->room_size();
  for (int i = 0; i < this->room_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoomIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoomIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoomIndex::MergeFrom(const ChatRoomIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_.MergeFrom(from.room_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoomIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomIndex::CopyFrom(const ChatRoomIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomIndex::IsInitialized() const {

  for (int i = 0; i < room_size(); i++) {
    if (!this->room(i).IsInitialized()) return false;
  }
  return true;
}

void ChatRoomIndex::Swap(ChatRoomIndex* other) {
  if (other != this) {
    room_.Swap(&other->room_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoomIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomIndex_descriptor_;
  metadata.reflection = ChatRoomIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatMessage::kSenderFieldNumber;
const int ChatMessage::kTargetFieldNumber;
const int ChatMessage::kMessageFieldNumber;
#endif  // !_MSC_VER

ChatMessage::ChatMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatMessage::InitAsDefaultInstance() {
}

ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatMessage::SharedCtor() {
  _cached_size_ = 0;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMessage::~ChatMessage() {
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void ChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessage_descriptor_;
}

const ChatMessage& ChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eros_2eproto();
  return *default_instance_;
}

ChatMessage* ChatMessage::default_instance_ = NULL;

ChatMessage* ChatMessage::New() const {
  return new ChatMessage;
}

void ChatMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::kEmptyString) {
        target_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }

      // required string target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // required string message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sender(), output);
  }

  // required string target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->target(), output);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender(), target);
  }

  // required string target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->target(), target);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // required string target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

    // required string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(target_, other->target_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessage_descriptor_;
  metadata.reflection = ChatMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoomMessage::kRoomFieldNumber;
const int ChatRoomMessage::kSenderFieldNumber;
const int ChatRoomMessage::kMessageFieldNumber;
#endif  // !_MSC_VER

ChatRoomMessage::ChatRoomMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatRoomMessage::InitAsDefaultInstance() {
  room_ = const_cast< ::protobufs::ChatRoomInfo*>(&::protobufs::ChatRoomInfo::default_instance());
  sender_ = const_cast< ::protobufs::UserStats*>(&::protobufs::UserStats::default_instance());
}

ChatRoomMessage::ChatRoomMessage(const ChatRoomMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatRoomMessage::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
  sender_ = NULL;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoomMessage::~ChatRoomMessage() {
  SharedDtor();
}

void ChatRoomMessage::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
    delete room_;
    delete sender_;
  }
}

void ChatRoomMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomMessage_descriptor_;
}

const ChatRoomMessage& ChatRoomMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eros_2eproto();
  return *default_instance_;
}

ChatRoomMessage* ChatRoomMessage::default_instance_ = NULL;

ChatRoomMessage* ChatRoomMessage::New() const {
  return new ChatRoomMessage;
}

void ChatRoomMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_room()) {
      if (room_ != NULL) room_->::protobufs::ChatRoomInfo::Clear();
    }
    if (has_sender()) {
      if (sender_ != NULL) sender_->::protobufs::UserStats::Clear();
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoomMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobufs.ChatRoomInfo room = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sender;
        break;
      }

      // required .protobufs.UserStats sender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // required string message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatRoomMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobufs.ChatRoomInfo room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(), output);
  }

  // required .protobufs.UserStats sender = 2;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sender(), output);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatRoomMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobufs.ChatRoomInfo room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(), target);
  }

  // required .protobufs.UserStats sender = 2;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sender(), target);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatRoomMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobufs.ChatRoomInfo room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

    // required .protobufs.UserStats sender = 2;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }

    // required string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoomMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoomMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoomMessage::MergeFrom(const ChatRoomMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      mutable_room()->::protobufs::ChatRoomInfo::MergeFrom(from.room());
    }
    if (from.has_sender()) {
      mutable_sender()->::protobufs::UserStats::MergeFrom(from.sender());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoomMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomMessage::CopyFrom(const ChatRoomMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  if (has_sender()) {
    if (!this->sender().IsInitialized()) return false;
  }
  return true;
}

void ChatRoomMessage::Swap(ChatRoomMessage* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(sender_, other->sender_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoomMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomMessage_descriptor_;
  metadata.reflection = ChatRoomMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatPrivateMessage::kSenderFieldNumber;
const int ChatPrivateMessage::kMessageFieldNumber;
#endif  // !_MSC_VER

ChatPrivateMessage::ChatPrivateMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatPrivateMessage::InitAsDefaultInstance() {
  sender_ = const_cast< ::protobufs::UserStats*>(&::protobufs::UserStats::default_instance());
}

ChatPrivateMessage::ChatPrivateMessage(const ChatPrivateMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatPrivateMessage::SharedCtor() {
  _cached_size_ = 0;
  sender_ = NULL;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatPrivateMessage::~ChatPrivateMessage() {
  SharedDtor();
}

void ChatPrivateMessage::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
    delete sender_;
  }
}

void ChatPrivateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatPrivateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatPrivateMessage_descriptor_;
}

const ChatPrivateMessage& ChatPrivateMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eros_2eproto();
  return *default_instance_;
}

ChatPrivateMessage* ChatPrivateMessage::default_instance_ = NULL;

ChatPrivateMessage* ChatPrivateMessage::New() const {
  return new ChatPrivateMessage;
}

void ChatPrivateMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != NULL) sender_->::protobufs::UserStats::Clear();
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatPrivateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobufs.UserStats sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // required string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatPrivateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobufs.UserStats sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sender(), output);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatPrivateMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobufs.UserStats sender = 1;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sender(), target);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatPrivateMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobufs.UserStats sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }

    // required string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatPrivateMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatPrivateMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatPrivateMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatPrivateMessage::MergeFrom(const ChatPrivateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      mutable_sender()->::protobufs::UserStats::MergeFrom(from.sender());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatPrivateMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatPrivateMessage::CopyFrom(const ChatPrivateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatPrivateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_sender()) {
    if (!this->sender().IsInitialized()) return false;
  }
  return true;
}

void ChatPrivateMessage::Swap(ChatPrivateMessage* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatPrivateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatPrivateMessage_descriptor_;
  metadata.reflection = ChatPrivateMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoomUser::kRoomFieldNumber;
const int ChatRoomUser::kUserFieldNumber;
#endif  // !_MSC_VER

ChatRoomUser::ChatRoomUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatRoomUser::InitAsDefaultInstance() {
  room_ = const_cast< ::protobufs::ChatRoomInfo*>(&::protobufs::ChatRoomInfo::default_instance());
  user_ = const_cast< ::protobufs::UserStats*>(&::protobufs::UserStats::default_instance());
}

ChatRoomUser::ChatRoomUser(const ChatRoomUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatRoomUser::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoomUser::~ChatRoomUser() {
  SharedDtor();
}

void ChatRoomUser::SharedDtor() {
  if (this != default_instance_) {
    delete room_;
    delete user_;
  }
}

void ChatRoomUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomUser_descriptor_;
}

const ChatRoomUser& ChatRoomUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eros_2eproto();
  return *default_instance_;
}

ChatRoomUser* ChatRoomUser::default_instance_ = NULL;

ChatRoomUser* ChatRoomUser::New() const {
  return new ChatRoomUser;
}

void ChatRoomUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_room()) {
      if (room_ != NULL) room_->::protobufs::ChatRoomInfo::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::protobufs::UserStats::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoomUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobufs.ChatRoomInfo room = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // required .protobufs.UserStats user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatRoomUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobufs.ChatRoomInfo room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(), output);
  }

  // required .protobufs.UserStats user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatRoomUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobufs.ChatRoomInfo room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(), target);
  }

  // required .protobufs.UserStats user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatRoomUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobufs.ChatRoomInfo room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

    // required .protobufs.UserStats user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoomUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoomUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoomUser::MergeFrom(const ChatRoomUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      mutable_room()->::protobufs::ChatRoomInfo::MergeFrom(from.room());
    }
    if (from.has_user()) {
      mutable_user()->::protobufs::UserStats::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoomUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomUser::CopyFrom(const ChatRoomUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void ChatRoomUser::Swap(ChatRoomUser* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoomUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomUser_descriptor_;
  metadata.reflection = ChatRoomUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoomRequest::kRoomFieldNumber;
const int ChatRoomRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER

ChatRoomRequest::ChatRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatRoomRequest::InitAsDefaultInstance() {
}

ChatRoomRequest::ChatRoomRequest(const ChatRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  room_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoomRequest::~ChatRoomRequest() {
  SharedDtor();
}

void ChatRoomRequest::SharedDtor() {
  if (room_ != &::google::protobuf::internal::kEmptyString) {
    delete room_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void ChatRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomRequest_descriptor_;
}

const ChatRoomRequest& ChatRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eros_2eproto();
  return *default_instance_;
}

ChatRoomRequest* ChatRoomRequest::default_instance_ = NULL;

ChatRoomRequest* ChatRoomRequest::New() const {
  return new ChatRoomRequest;
}

void ChatRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_room()) {
      if (room_ != &::google::protobuf::internal::kEmptyString) {
        room_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room().data(), this->room().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->room(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoomRequest::MergeFrom(const ChatRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      set_room(from.room());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomRequest::CopyFrom(const ChatRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChatRoomRequest::Swap(ChatRoomRequest* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomRequest_descriptor_;
  metadata.reflection = ChatRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchmakingStats::kRegionFieldNumber;
const int MatchmakingStats::kSearchingUsersFieldNumber;
#endif  // !_MSC_VER

MatchmakingStats::MatchmakingStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchmakingStats::InitAsDefaultInstance() {
}

MatchmakingStats::MatchmakingStats(const MatchmakingStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchmakingStats::SharedCtor() {
  _cached_size_ = 0;
  region_ = 1;
  searching_users_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchmakingStats::~MatchmakingStats() {
  SharedDtor();
}

void MatchmakingStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchmakingStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchmakingStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchmakingStats_descriptor_;
}

const MatchmakingStats& MatchmakingStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eros_2eproto();
  return *default_instance_;
}

MatchmakingStats* MatchmakingStats::default_instance_ = NULL;

MatchmakingStats* MatchmakingStats::New() const {
  return new MatchmakingStats;
}

void MatchmakingStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_ = 1;
    searching_users_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchmakingStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobufs.Region region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobufs::Region_IsValid(value)) {
            set_region(static_cast< ::protobufs::Region >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_searching_users;
        break;
      }

      // required int64 searching_users = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_searching_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &searching_users_)));
          set_has_searching_users();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchmakingStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobufs.Region region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->region(), output);
  }

  // required int64 searching_users = 2;
  if (has_searching_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->searching_users(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchmakingStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobufs.Region region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->region(), target);
  }

  // required int64 searching_users = 2;
  if (has_searching_users()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->searching_users(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchmakingStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobufs.Region region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->region());
    }

    // required int64 searching_users = 2;
    if (has_searching_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->searching_users());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchmakingStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchmakingStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchmakingStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchmakingStats::MergeFrom(const MatchmakingStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_searching_users()) {
      set_searching_users(from.searching_users());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchmakingStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchmakingStats::CopyFrom(const MatchmakingStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchmakingStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MatchmakingStats::Swap(MatchmakingStats* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(searching_users_, other->searching_users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchmakingStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchmakingStats_descriptor_;
  metadata.reflection = MatchmakingStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerStats::kActiveUsersFieldNumber;
const int ServerStats::kSearchingUsersFieldNumber;
const int ServerStats::kRegionFieldNumber;
#endif  // !_MSC_VER

ServerStats::ServerStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerStats::InitAsDefaultInstance() {
}

ServerStats::ServerStats(const ServerStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerStats::SharedCtor() {
  _cached_size_ = 0;
  active_users_ = GOOGLE_LONGLONG(0);
  searching_users_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStats::~ServerStats() {
  SharedDtor();
}

void ServerStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStats_descriptor_;
}

const ServerStats& ServerStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eros_2eproto();
  return *default_instance_;
}

ServerStats* ServerStats::default_instance_ = NULL;

ServerStats* ServerStats::New() const {
  return new ServerStats;
}

void ServerStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    active_users_ = GOOGLE_LONGLONG(0);
    searching_users_ = GOOGLE_LONGLONG(0);
  }
  region_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 active_users = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_users_)));
          set_has_active_users();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_searching_users;
        break;
      }

      // required int64 searching_users = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_searching_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &searching_users_)));
          set_has_searching_users();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_region;
        break;
      }

      // repeated .protobufs.MatchmakingStats region = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_region;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 active_users = 1;
  if (has_active_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->active_users(), output);
  }

  // required int64 searching_users = 2;
  if (has_searching_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->searching_users(), output);
  }

  // repeated .protobufs.MatchmakingStats region = 3;
  for (int i = 0; i < this->region_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->region(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 active_users = 1;
  if (has_active_users()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->active_users(), target);
  }

  // required int64 searching_users = 2;
  if (has_searching_users()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->searching_users(), target);
  }

  // repeated .protobufs.MatchmakingStats region = 3;
  for (int i = 0; i < this->region_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->region(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 active_users = 1;
    if (has_active_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_users());
    }

    // required int64 searching_users = 2;
    if (has_searching_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->searching_users());
    }

  }
  // repeated .protobufs.MatchmakingStats region = 3;
  total_size += 1 * this->region_size();
  for (int i = 0; i < this->region_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->region(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStats::MergeFrom(const ServerStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  region_.MergeFrom(from.region_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active_users()) {
      set_active_users(from.active_users());
    }
    if (from.has_searching_users()) {
      set_searching_users(from.searching_users());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStats::CopyFrom(const ServerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < region_size(); i++) {
    if (!this->region(i).IsInitialized()) return false;
  }
  return true;
}

void ServerStats::Swap(ServerStats* other) {
  if (other != this) {
    std::swap(active_users_, other->active_users_);
    std::swap(searching_users_, other->searching_users_);
    region_.Swap(&other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStats_descriptor_;
  metadata.reflection = ServerStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Character::kRegionFieldNumber;
const int Character::kSubregionFieldNumber;
const int Character::kProfileIdFieldNumber;
const int Character::kCharacterNameFieldNumber;
const int Character::kCharacterCodeFieldNumber;
const int Character::kProfileLinkFieldNumber;
const int Character::kIngameProfileLinkFieldNumber;
const int Character::kVerifiedFieldNumber;
const int Character::kVerificationPortraitFieldNumber;
#endif  // !_MSC_VER

Character::Character()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Character::InitAsDefaultInstance() {
}

Character::Character(const Character& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Character::SharedCtor() {
  _cached_size_ = 0;
  region_ = 1;
  subregion_ = 0;
  profile_id_ = 0;
  character_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  character_code_ = 0;
  profile_link_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ingame_profile_link_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verified_ = false;
  verification_portrait_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Character::~Character() {
  SharedDtor();
}

void Character::SharedDtor() {
  if (character_name_ != &::google::protobuf::internal::kEmptyString) {
    delete character_name_;
  }
  if (profile_link_ != &::google::protobuf::internal::kEmptyString) {
    delete profile_link_;
  }
  if (ingame_profile_link_ != &::google::protobuf::internal::kEmptyString) {
    delete ingame_profile_link_;
  }
  if (this != default_instance_) {
  }
}

void Character::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Character::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Character_descriptor_;
}

const Character& Character::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eros_2eproto();
  return *default_instance_;
}

Character* Character::default_instance_ = NULL;

Character* Character::New() const {
  return new Character;
}

void Character::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_ = 1;
    subregion_ = 0;
    profile_id_ = 0;
    if (has_character_name()) {
      if (character_name_ != &::google::protobuf::internal::kEmptyString) {
        character_name_->clear();
      }
    }
    character_code_ = 0;
    if (has_profile_link()) {
      if (profile_link_ != &::google::protobuf::internal::kEmptyString) {
        profile_link_->clear();
      }
    }
    if (has_ingame_profile_link()) {
      if (ingame_profile_link_ != &::google::protobuf::internal::kEmptyString) {
        ingame_profile_link_->clear();
      }
    }
    verified_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    verification_portrait_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Character::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobufs.Region region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobufs::Region_IsValid(value)) {
            set_region(static_cast< ::protobufs::Region >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_subregion;
        break;
      }

      // required int32 subregion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subregion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subregion_)));
          set_has_subregion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_profile_id;
        break;
      }

      // required int32 profile_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profile_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profile_id_)));
          set_has_profile_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_character_name;
        break;
      }

      // required string character_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_character_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_character_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->character_name().data(), this->character_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_character_code;
        break;
      }

      // required int32 character_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_character_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_code_)));
          set_has_character_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_profile_link;
        break;
      }

      // optional string profile_link = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profile_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profile_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->profile_link().data(), this->profile_link().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ingame_profile_link;
        break;
      }

      // optional string ingame_profile_link = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ingame_profile_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ingame_profile_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ingame_profile_link().data(), this->ingame_profile_link().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_verified;
        break;
      }

      // optional bool verified = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_verified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verified_)));
          set_has_verified();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_verification_portrait;
        break;
      }

      // optional int32 verification_portrait = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_verification_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verification_portrait_)));
          set_has_verification_portrait();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Character::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobufs.Region region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->region(), output);
  }

  // required int32 subregion = 2;
  if (has_subregion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->subregion(), output);
  }

  // required int32 profile_id = 3;
  if (has_profile_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->profile_id(), output);
  }

  // required string character_name = 4;
  if (has_character_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->character_name().data(), this->character_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->character_name(), output);
  }

  // required int32 character_code = 5;
  if (has_character_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->character_code(), output);
  }

  // optional string profile_link = 6;
  if (has_profile_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profile_link().data(), this->profile_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->profile_link(), output);
  }

  // optional string ingame_profile_link = 7;
  if (has_ingame_profile_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ingame_profile_link().data(), this->ingame_profile_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ingame_profile_link(), output);
  }

  // optional bool verified = 8;
  if (has_verified()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->verified(), output);
  }

  // optional int32 verification_portrait = 9;
  if (has_verification_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->verification_portrait(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Character::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobufs.Region region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->region(), target);
  }

  // required int32 subregion = 2;
  if (has_subregion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->subregion(), target);
  }

  // required int32 profile_id = 3;
  if (has_profile_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->profile_id(), target);
  }

  // required string character_name = 4;
  if (has_character_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->character_name().data(), this->character_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->character_name(), target);
  }

  // required int32 character_code = 5;
  if (has_character_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->character_code(), target);
  }

  // optional string profile_link = 6;
  if (has_profile_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profile_link().data(), this->profile_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->profile_link(), target);
  }

  // optional string ingame_profile_link = 7;
  if (has_ingame_profile_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ingame_profile_link().data(), this->ingame_profile_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ingame_profile_link(), target);
  }

  // optional bool verified = 8;
  if (has_verified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->verified(), target);
  }

  // optional int32 verification_portrait = 9;
  if (has_verification_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->verification_portrait(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Character::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobufs.Region region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->region());
    }

    // required int32 subregion = 2;
    if (has_subregion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subregion());
    }

    // required int32 profile_id = 3;
    if (has_profile_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profile_id());
    }

    // required string character_name = 4;
    if (has_character_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->character_name());
    }

    // required int32 character_code = 5;
    if (has_character_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_code());
    }

    // optional string profile_link = 6;
    if (has_profile_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profile_link());
    }

    // optional string ingame_profile_link = 7;
    if (has_ingame_profile_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ingame_profile_link());
    }

    // optional bool verified = 8;
    if (has_verified()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 verification_portrait = 9;
    if (has_verification_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verification_portrait());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Character::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Character* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Character*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Character::MergeFrom(const Character& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_subregion()) {
      set_subregion(from.subregion());
    }
    if (from.has_profile_id()) {
      set_profile_id(from.profile_id());
    }
    if (from.has_character_name()) {
      set_character_name(from.character_name());
    }
    if (from.has_character_code()) {
      set_character_code(from.character_code());
    }
    if (from.has_profile_link()) {
      set_profile_link(from.profile_link());
    }
    if (from.has_ingame_profile_link()) {
      set_ingame_profile_link(from.ingame_profile_link());
    }
    if (from.has_verified()) {
      set_verified(from.verified());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_verification_portrait()) {
      set_verification_portrait(from.verification_portrait());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Character::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Character::CopyFrom(const Character& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Character::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Character::Swap(Character* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(subregion_, other->subregion_);
    std::swap(profile_id_, other->profile_id_);
    std::swap(character_name_, other->character_name_);
    std::swap(character_code_, other->character_code_);
    std::swap(profile_link_, other->profile_link_);
    std::swap(ingame_profile_link_, other->ingame_profile_link_);
    std::swap(verified_, other->verified_);
    std::swap(verification_portrait_, other->verification_portrait_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Character::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Character_descriptor_;
  metadata.reflection = Character_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobufs

// @@protoc_insertion_point(global_scope)
